__author__ = 'Shayhan'

folder_path = 'D:/Research/blood_glucose/blood_glucose/data/'

# -*- coding: utf-8 -*-
"""blood_glucose.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CCry3tCU6wKQH5-CrK2uMk9MLL7N6Mhb

# replace에 있는 것들이 올바른지 확인할 것
"""

#!pip install ipdb

# Commented out IPython magic to ensure Python compatibility.
# %pdb on

class StopExecution(Exception):
    def _render_traceback_(self):
        return []

def my_exit(): raise StopExecution
def my_display(rows, df, empty_print=True):
  if (not empty_print) and len(df.index) == 0:
    return
  with pd.option_context("display.max_rows", rows):
    display(df)

# from google.colab import drive
# drive.mount('/content/drive', force_remount=True)

# folder_path = '/content/drive/My Drive/Documents/05research/blood_glucose'

# folder_path = 'D:/Research/blood_glucose/blood_glucose/py_codes/data'

import sys
sys.path.append(folder_path)

import os
os.chdir(folder_path)

from importlib import reload  # Py3 only; unneeded in py2.
import pandas as pd
import re
import datetime
from pytz import timezone
from itertools import repeat


def timestamp():
  return datetime.datetime.now().astimezone(timezone('Asia/Seoul')).strftime('%Y%m%d-%H%M')

import logging as log
log.getLogger().setLevel(log.WARNING)

pd.options.mode.copy_on_write = True


#log.basicConfig(filename='bst.log', level=log.DEBUG)
#!cat ./logs/bst.log

import io

def print_to_string(*args, **kwargs):
  output = io.StringIO()
  print(*args, file=output, **kwargs)
  contents = output.getvalue()
  output.close()
  return contents

def print_for_log(*args, **kwargs):
  return print_to_string(*args, **kwargs, end='')

import matplotlib.pyplot as plt

#!ls

raw_calory_df = pd.read_excel(folder_path + "calories_table 2.xlsx", engine = "openpyxl")

raw_tpn_df = pd.read_excel(folder_path + "TPN_calories.xlsx", engine = "openpyxl");

#crf_files = {'DUMC':'dumc_crf_20230602.xlsx', 'KHNMC':'KHNMC_BST_CRF_230524.xlsx', 'KNUH':'KNUH_BST_CRF_20230504.xlsx'}
#crf_files = {'DUMC':'BST_DUMC_CRF_230615.xlsx', 'KHNMC':'KHNMC_BST_CRF_230614.xlsx', 'KNUH':'KNUH_BST_CRF_230614.xlsx'}
#crf_files = {'DUMC':'DUMC_BST_CRF_230808.xlsx', 'KHNMC':'KHNMC_BST_CRF_230808.xlsx', 'KNUH':'KNUH_BST_CRF_230808.xlsx'}
#crf_files = {'DUMC':'DUMC_BST_CRF_230828.xlsx', 'KHNMC':'KHNMC_BST_CRF_230828.xlsx', 'KNUH':'KNUH_BST_CRF_230828.xlsx'}
#crf_files = {'DUMC':'DUMC_BST_CRF_231012.xlsx', 'KHNMC':'KHNMC_BST_CRF_231012_1.xlsx', 'KNUH':'KNUH_BST_CRF_231012.xlsx'}

#crf_files = {'DUMC':'DUMC_BST_CRF_231012.xlsx', 'KHNMC':'KHNMC_BST_CRF_231012_1.xlsx', 'KNUH':'KNUH_BST_CRF_231012.xlsx'}
#crf_usecols = {'DUMC':'A:FR', 'KHNMC':'A:FK', 'KNUH':'A:HQ'}


#crf_files = {'DUMC':'DUMC_BST_CRF_steroid_20240207.xlsx', 'KHNMC':'KHNMC_BST_CRF_steroid_20240207.xlsx', 'KNUH':'KNUH_BST_CRF_steroid_20240207.xlsx'}
#crf_usecols = {'DUMC':'A:FR,GE:GP, GR:GU', 'KHNMC':'A:FK,FP:GN', 'KNUH':'A:HQ,HV:IV'}

#crf_files = {'DUMC':'DUMC_BST_CRF_steroid_231206.xlsx', 'KHNMC':'KHNMC_BST_CRF_steroid_231206.xlsx'}
#crf_usecols = {'DUMC':'A:FR,GE:GP, GR:GU', 'KHNMC':'A:FK,FP:GN'}

#crf_files = {'DUMC':'DUMC_BST_CRF_insulin_20240217.xlsx'}
#crf_usecols = {'DUMC':'A:FR,GE:GP, GR:GU'}

#crf_files = {'COMBINE':'BST_CRF_combine_240228_1.xlsx'}
#crf_usecols = {'COMBINE':'A:GH,GM:HB'}

#crf_files = {'COMBINE':'BST_CRF_combine_240313_finish.xlsx'}
#crf_files = {'COMBINE':'BST_CRF_combine_240313_finish_240418.xlsx'}
#crf_files = {'COMBINE':'BST_CRF_combine_240508update.xlsx'}
#crf_files = {'COMBINE':'BST_CRF_combine_240611update.xlsx'}
# crf_files = {'COMBINE':'BST_CRF_combine_240801_CRRT.xlsx'}
crf_files = {'COMBINE':'BST_CRF_combine_240808_CRRT.xlsx'}

#crf_usecols = {'COMBINE':'A:HI,HN:IR'}
crf_usecols = {'COMBINE':'A:BY,CC:ET,FA:IR,IX:IY,JA:JF'} # remove BF_MEDI_4, AFTER_MEDI_8&9

raw_crf_df_dict = {}
for key, value in crf_files.items():
  #df = pd.read_excel(folder_path + value, header=[0,1,2], engine = "openpyxl")
  df = pd.read_excel(folder_path + value, header=0, usecols=crf_usecols[key], engine = "openpyxl")
  df.columns = df.columns.str.strip()

  raw_crf_df_dict[key] = df[df.iloc[:,1].notna()] # drop rows without patient no
  if key != 'COMBINE':
    raw_crf_df_dict[key].iloc[:,0] = key  # set hospital id

# TPN/Fluid hourly data
#raw_crf_fluid_df = pd.read_excel(folder_path + 'fluid_hourly_240617.xlsx', engine = "openpyxl")
# raw_crf_fluid_df = pd.read_excel(folder_path + 'BST_Fluid_hourly_New_240801.xlsx', engine = "openpyxl")
raw_crf_fluid_df = pd.read_excel(folder_path + 'BST_Fluid_hourly_New_240808.xlsx', engine = "openpyxl")
crf_fluid_df = raw_crf_fluid_df

# insulin hourly data
#raw_crf_insulin_df = pd.read_excel(folder_path + 'insulin_hourly_240617.xlsx', engine = "openpyxl")
raw_crf_insulin_df = pd.read_excel(folder_path + 'BST_insulin_hourly_New_240801.xlsx', engine = "openpyxl")
crf_insulin_df = raw_crf_insulin_df

#bst_files = {'DUMC':'DUMC_BST_20230610.csv', 'KHNMC':'KHNMC_BST_20230610.csv', 'KNUH':'KNUH_BST_20230620.csv'}
#bst_files = {'DUMC':'DUMC_BST_230808.xlsx', 'KHNMC':'KHNMC_BST_230808.xlsx', 'KNUH':'KNUH_BST_230808.xlsx'}
#bst_files = {'DUMC':'DUMC_BST_231207.xlsx', 'KHNMC':'KHNMC_BST_231207.xlsx', 'KNUH':'KNUH_BST_230808.xlsx'}

bst_files = {'DUMC':'DUMC_BST_231207.xlsx', 'KHNMC':'KHNMC_BST_231207.xlsx', 'KNUH':'KNUH_BST_230808.xlsx'}
raw_bst_df_dict = {}
for key, value in bst_files.items():
  raw_bst_df_dict[key] = pd.read_excel(folder_path + value, header=0, names=['pno', 'time', 'value'], engine = 'openpyxl' if value.split('.')[-1].lower() == 'xlsx' else None)
  #raw_bst_df_dict[key] = pd.read_csv(folder_path + value, header=0, names=['pno', 'time', 'value'])
  #raw_bst_df_dict[key] = pd.read_excel(folder_path + value, header=0, names=['pno', 'time', 'value'], engine = 'openpyxl')
  raw_bst_df_dict[key] = raw_bst_df_dict[key].dropna()
  raw_bst_df_dict[key].insert(0, 'ht_id', key)
  log.debug(raw_bst_df_dict[key])
raw_bst_df = pd.concat(raw_bst_df_dict.values(), ignore_index=True)
bst_df = raw_bst_df


# 경장영양액 (Enteral Nutrition Solution: ENS) 영양성분
#skip_cols=[0];
#raw_ens_df = pd.read_excel(folder_path + "2011_경장영양액영양성분.xls", sheet_name=1, usecols=lambda x: x not in skip_cols, skiprows=2);
raw_ens_df = pd.read_excel(folder_path + "경장영양액.xlsx", engine = "openpyxl");
ens_df = raw_ens_df

# insulin info
raw_insulin_info_df = pd.read_excel(folder_path + "insulin_info.xlsx", usecols='A:E', engine = "openpyxl");
insulin_info_df = raw_insulin_info_df.set_index('name')

# steroid info
raw_steroid_info_df = pd.read_excel(folder_path + "steroid_info.xlsx", usecols='A:E', engine = "openpyxl");
steroid_info_df = raw_steroid_info_df.set_index('name')

# for debugging and testing
for key, value in raw_crf_df_dict.items():
  log.debug(raw_crf_df_dict[key])
  log.debug(raw_crf_df_dict[key].columns.values)

# Rename CRF columns
for key, df in raw_crf_df_dict.items():
  print("Hospital name: " + key)
  print("length:" + str(len(df.columns.to_list())))
  log.debug(df.columns.to_list())


# check for uniqueness of column names
for key, df in raw_crf_df_dict.items():
  if len([x for x in df.columns if df.columns.to_list().count(x) > 1]) != 0:
    log.error("duplicated columns: " + [x for x in df.columns if df.columns.to_list().count(x) > 1])

#print(len(new_crf_dumc_df_columns))
#print(len(new_crf_khnmc_df_columns))
#print(len(new_crf_knuh_df_columns))
#print(len(raw_crf_df_dict['DUMC'].columns.to_list()))
#print(len(raw_crf_df_dict['KHNMC'].columns.to_list()))
#print(len(raw_crf_df_dict['KNUH'].columns.to_list()))

# Merge CRF dataframes removing the NA columns

# drop invalid rows
crf_df = pd.concat(raw_crf_df_dict.values(), ignore_index=True).dropna(how='all', axis='columns')
crf_df_col_list = crf_df.columns.to_list();

# check the validity of column names
#for key, value in raw_crf_df_dict.items():
#TODO: how do we generalize the checks below for different sets of keys
#print([x for x in new_crf_df_columns_dict['DUMC'] if x not in new_crf_df_columns_dict['KNUH']])
#print([x for x in new_crf_df_columns_dict['KHNMC'] if x not in new_crf_df_columns_dict['KNUH']])

log.debug(crf_df)

# aliases for column or column groups
ht_col = 'Hospi.name'
pno_col = 'Hospi.No'
age_col = 'Age'
gender_col = 'Gender'
hgt_col = 'Ht'
bwt_col = 'Bwt'

d0_time_col =  'feeding_start_time'
d1_time_col = 'D1_time'
d1_feeding_time_col = 'D1_feeding_time'

feeding_time_cols = sorted([ x for x in crf_df.columns if "feeding_time" in x ]) # sorted in the order of feeding no
#feeding_time_cols = [ f'D0_feeding_time_No_{x}' for x in range(1, 10)]
#print(feeding_time_cols)
tpn_name_cols = [ x for x in crf_df.columns if "TPN_name" in x ]
tpn_time_cols = [ x for x in crf_df.columns if "TPN_restart" in x or "TPN_finish" in x]
fluid_name_cols = [ x for x in crf_df.columns if "BF_fluid_name" in x ] # used for only Before Feedings
ens_name_cols = [ x for x in crf_df.columns if "feeding_name" in x ]
tpn_amount_cols = [ x for x in crf_df.columns if "TPN_amount" in x ]
fluid_amount_cols = [ x for x in crf_df.columns if ("BF_fluid_amount" in x) or (x[3:6] in ['5DW', '5DS']) or (x[3:7] in ['10DW', '20DW', '50DW']) ]
#dw_amount_cols = [ x for x in crf_df.columns if "fluid" in x[1] and "amount" == x[2] ]
ens_amount_cols = [ x for x in crf_df.columns if "feeding_amount" in x ]

insulin_name_cols = [ x for x in crf_df.columns if "insulin__name" in x ]
insulin_amount_cols = [ x for x in crf_df.columns if "insulin__amount" in x ]
insulin_time_cols = [ x for x in crf_df.columns if ("insulin__time" in x)  or ("insulin__start" in x) or ("insulin__finish" in x) ]
medication_name_cols = [ x for x in crf_df.columns if "medi__name" in x ]
medication_amount_cols = [ x for x in crf_df.columns if "medi__amount" in x ]
medication_time_cols = [ x for x in crf_df.columns if "medi__time" in x ]

steroid_name_cols = [ x for x in crf_df.columns if "steroid_name" in x ]
steroid_time_cols = [ x for x in crf_df.columns if ("steroid_time" in x) or ("steroid_start" in x) or ("steroid_finish" in x) ]
steroid_dose_cols = [ x for x in crf_df.columns if "steroid_dose" in x ]

icu_adm_time_col = 'Date_adm_icu'
icu_dis_time_col = 'Date_dis_icu'
time_cols =  [icu_adm_time_col, icu_dis_time_col, d0_time_col, d1_time_col, d1_feeding_time_col] + feeding_time_cols + tpn_time_cols + insulin_time_cols + medication_time_cols + steroid_time_cols
amount_cols = tpn_amount_cols + fluid_amount_cols + ens_amount_cols + insulin_amount_cols + medication_amount_cols + steroid_dose_cols

max_feeding_no = max([ int(x[-1]) for x in crf_df.columns if 'D0_feeding_time_No' in x ])

hourly_fluid_name_col = 'fluid_name'
hourly_insulin_name_col = 'insulin__name'

hour_cols = [ f'at_{x}AM' for x in range(12)] + [ f'at_{x}PM' for x in range(12,24)]

log.debug('feeding_time_cols: ', feeding_time_cols)
log.debug('tpn_name_cols: ', tpn_name_cols)
log.debug('tpn_amount_cols: ', tpn_amount_cols)
log.debug('fluid_name_cols: ', fluid_name_cols)
log.debug('fluid_amount_cols: ', fluid_amount_cols)
log.debug('ens_name_cols: ', ens_name_cols)
log.debug('ens_amount_cols: ', ens_amount_cols)
log.debug('insulin_name_cols: ', insulin_name_cols)
log.debug('insulin_amount_cols: ', insulin_amount_cols)
log.debug('medication_name_cols: ', medication_name_cols)
log.debug('medication_amount_cols: ', medication_amount_cols)
log.debug('steroid_name_cols: ', steroid_name_cols)
log.debug('steroid_time_cols: ', steroid_time_cols)
log.debug('steroid_dose_cols: ', steroid_dose_cols)
log.debug('amount_cols: ', amount_cols)
log.debug('time_cols: ', time_cols)

# Patient Selection
#crf_df = crf_df[crf_df[ht_col]=='DUMC']
#my_display(1000, crf_df)

# strip whitespaces
df = crf_df.select_dtypes(['object'])

crf_df[df.columns] = df.apply(lambda x: x.astype(str).str.strip().mask(x.isna()))

log.debug(crf_df.dtypes.tolist())
log.debug(crf_df)

# TPN table 전처리
tpn_df = raw_tpn_df.dropna(how='all').rename(columns={"tpn":'name',"Total volume (ml/bag)":'volume',"Total calorie (kcal/bag)":'calorie'})

tpn_df['name'] = tpn_df['name'].str.strip()
tpn_df['concentration'] = tpn_df['calorie'] / tpn_df['volume']

tpn_df = tpn_df[['name','concentration']].set_index('name')

log.debug(tpn_df)

# ENS table 전처리
ens_df = raw_ens_df.set_index('name')

# examine CRF files
for key, df in raw_crf_df_dict.items():
  df = df.T
  log.debug("Hospital name: " + key)
  with pd.option_context("display.max_rows", 300):
    log.debug(df)

# preprocess BST file
bst_df = bst_df.rename(columns={'ht_id':ht_col, 'pno':pno_col})

# examine amount columns
for col in amount_cols:
  if crf_df[col].dtype.kind not in 'iuf':
    #display(crf_df[col][crf_df[col].str.contains(r'[^0-9.]', regex=True, na=False)])
    crf_df[col] = crf_df[col].str.strip()
    df = crf_df[col].replace(r'([0-9\.]*)(.*)',r'\2',regex=True)
    log.warning(print_to_string(col, df.dropna().unique().tolist(), end=''))

# removing unit names
for col in amount_cols:
  if crf_df[col].dtype.kind not in 'iuf':
    log.debug(crf_df[col].str.contains(r'[^0-9.]', regex=True, na=False))
    crf_df[col] = crf_df[col].replace(r'([0-9\.]*)(.*)',r'\1',regex=True)
    crf_df[col] = pd.to_numeric(crf_df[col])
    log.debug("dtype.kind: " + str(crf_df[col].dtype.kind))

    with pd.option_context("display.max_rows", crf_df.shape[0]):
      log.debug(crf_df[col])

# examine/preprocessing TPN/Fluid Hourly data
crf_fluid_df = crf_fluid_df[crf_fluid_df[hourly_fluid_name_col].notna()]
crf_fluid_df = crf_fluid_df[crf_fluid_df[hourly_fluid_name_col] != "NO Fluid"]

crf_fluid_df[hourly_fluid_name_col] = crf_fluid_df[hourly_fluid_name_col].astype(str).str.strip()

crf_fluid_df[hour_cols] = crf_fluid_df[hour_cols].fillna(0)

# examine/preprocessing insulin Hourly data
crf_insulin_df = crf_insulin_df[crf_insulin_df[hourly_insulin_name_col].notna()]
crf_insulin_df[hourly_insulin_name_col] = crf_insulin_df[hourly_insulin_name_col].astype(str).str.strip()

crf_insulin_df[hour_cols] = crf_insulin_df[hour_cols].fillna(0)

# @title
import numpy as np

crf_replace_dict = { #'#REF!' : np.nan,
                    'FOMS 986ml' : 'FOMS TNA 986ml',
               'Nutriflex 1250ml' : 'nutriflex peri 1250ml',
               'Omapone peri 724ml inj' : 'Omapone peri 724ml',
               'SMOFlipid 20% 500ml Inj' : 'SMOFlipid 20% 500ml',
               'SMOFlipid 20% 500ml inj' : 'SMOFlipid 20% 500ml',
               'smoflipid 20% 250ml'  : 'Smoflipid® 20%',
               '스모프카비벤 1206ml' : '스모프카비벤페리페랄주 1206ml',
               'SMOFlipid inj 20%' : 'Smoflipid® 20%',
               'SmofKabiven  CENTRAL 1477ml' : 'SmofKabiven CENTRAL 1477ml',
               '스모프카비벤페라페랄 1206ml' : '스모프카비벤페리페랄주 1206ml',
               '스모프카비벤페리페랄 1206ml' : '스모프카비벤페리페랄주 1206ml',
               '스모프카비벤페리 1206ml' : '스모프카비벤페리페랄주 1206ml',
               '오마프페리주 952ml' : '오마프원페리주 952ml',
               'periolimel 1500ml' : 'Peri olimel 1500ml',
               'winuf peri\xa0 2020ml' : 'winuf peri  2020ml',
                'peri olimel 2020ml' : 'winuf peri  2020ml',
               '0.05' : '5% DW',
               '0.1' : '10% DW',
               '0.2' : '20% DW',
               '5%DW' : '5% DW',
               '5%DS' : '5% DW', # consider as '5% DW'
               '5% DS' : '5% DW', # consider as '5% DW'
               '10%DW' : '10% DW',
               '20%DW' : '20% DW',
               '50%DW' : '50% DW',
               '10% D/W' : '10% DW',
               '5% D/S' : '5% DW', # consider as '5% DW'
               '5% D/W' : '5% DW',
               '50% D/W' : '50% DW',
               '주스' : 'IGNORE',
               'juice' : 'IGNORE',
               'MILK' : 'IGNORE',
               '20% ipidem' : 'IGNORE',
               'lipidem' : 'IGNORE',
               'lipidem 250ml' : 'IGNORE',
               'Intrafusin 10% 500ml': 'IGNORE',
               'Intrafusin 10% 500ml inj' : 'IGNORE', # 'Intrafusin 10% 500ml'
               'Nephsol 250ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based 1000ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based 1100ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based 1200ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based 1300ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based 1400ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based 750ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based 800ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based 840ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based 850ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based 900ml' : 'IGNORE',
               'FreamineDipeptiven, omega-3 based lipid 250ml' : 'IGNORE',
               'Proamin 10% 500ml' : 'IGNORE',
               'proamin 10% 500ml' : 'IGNORE',
               '펜타스판주 500ml' : 'IGNORE',

                # time values
                '18::00' : '18:00',
                    '2019-02-14 18::00' : '2019-02-14 18:00',
                    '2020-10-019 12:00' : '2020-10-19 12:00',
                '2020-10-019' : '2020-10-19',
                '20019-02-26 17:00' : '2019-02-26 17:00',

              #  '209-06-29 09:00' : '2019-06-29 09:00', # DUMC 10827549

                '2022-03-10 87:00' : '2022-03-10 8:00', # KHNMC	00985184
                    '209-06-29 09:00:00' : '2019-06-29 09:00',
                '201-11-9 18:00' : '2018-11-9 18:00',
                 '2020-003-20 18:00' : '2020-03-20 18:00',
                  '20021-02-13 18:00' : '2021-02-13 18:00',
                    '2017-7-8 8-7:00' : '2017-7-8 7:00',
                    '2019-03-05 24:00' : '2019-03-06 00:00',
                    '2021-02-23 24:00' : '2021-02-24 00:00',
              # steroid
                  'salon inj. 500mg' : '살론 주 500mg(한림제약)',
                  'salon inj 125mg' : 'salon inj. 125mg',
                  'expire' : pd.NaT,
                    'NPO' :  pd.NaT,
                    'ward' : pd.NaT,
                    '전동' : pd.NaT
}

crf_df = crf_df.apply(lambda x: x.replace(crf_replace_dict))

crf_insulin_replace_dict = {'0' : np.nan
                     }
crf_df[insulin_name_cols] = crf_df[insulin_name_cols].apply(lambda x: x.replace(crf_insulin_replace_dict))

crf_medication_replace_dict = {'0' : np.nan
                     }
crf_df[medication_name_cols] = crf_df[medication_name_cols].apply(lambda x: x.replace(crf_medication_replace_dict))

crf_steroid_replace_dict = {'' : np.nan
                     }
crf_df[steroid_name_cols] = crf_df[steroid_name_cols].apply(lambda x: x.replace(crf_steroid_replace_dict))

# TPN/Fluid Hourly data
crf_fluid_replace_dict = {'NO Fluid' : np.nan,
               'Proamin 10%' : np.nan,
               '20% ipidem' : np.nan,
               '주스' : np.nan,
               'juice' : np.nan,
               'MILK' : np.nan,
               '20% ipidem' : np.nan,
               'lipidem' : np.nan,
               'lipidem 250ml' : np.nan,
               '20% ipidem 250ml' : np.nan,
               'Intrafusin 10% 500ml': np.nan,
               'Intrafusin 10% 500ml inj' : np.nan, # 'Intrafusin 10% 500ml'
               'Nephsol 250ml' : np.nan,
               'FreamineDipeptiven, omega-3 based 1000ml' : np.nan,
               'FreamineDipeptiven, omega-3 based 1100ml' : np.nan,
               'FreamineDipeptiven, omega-3 based 1200ml' : np.nan,
               'FreamineDipeptiven, omega-3 based 1300ml' : np.nan,
               'FreamineDipeptiven, omega-3 based 1400ml' : np.nan,
               'FreamineDipeptiven, omega-3 based 750ml' : np.nan,
               'FreamineDipeptiven, omega-3 based 800ml' : np.nan,
               'FreamineDipeptiven, omega-3 based 840ml' : np.nan,
               'FreamineDipeptiven, omega-3 based 850ml' : np.nan,
               'FreamineDipeptiven, omega-3 based 900ml' : np.nan,
               'FreamineDipeptiven, omega-3 based lipid 250ml' : np.nan,
               'Freamine, omega-3 based adult TPN 120…' : np.nan,
               '펜타스판주 500ml' : np.nan,
               'Glutasol, omega-3 based adult TPN 1200ml' : np.nan,
               'Nutriflex 1250ml' : 'nutriflex peri 1250ml',
               'nutriflex 1250ml' : 'nutriflex peri 1250ml',
                'FOMS 986ml' : 'FOMS TNA 986ml',
               'FOMS TNA 986ml central  inj' : 'FOMS TNA 986ml central',
               'FOMS TNA peri 952ml inj' : 'FOMS TNA peri 952ml',
               'Omapeone Peri 724ml' : 'Omapone peri 724ml',
               'Omapone peri 724ml inj' : 'Omapone peri 724ml',
               '0.05' : '5% DW',
               '0.1' : '10% DW',
               '0.2' : '20% DW',
               '0.5' : '50% DW',
               '50' : '50% DW',
               '10%' : '10% DW',
               '20%' : '20% DW',
               '5%' : '5% DW',
               '50%' : '50% DW',
               '5%DW' : '5% DW',
                '5DS' : '5% DW',
               '5%DS' : '5% DW', # consider as '5% DW'
               '5% DS' : '5% DW', # consider as '5% DW'
               '5%D/S' : '5% DW', # consider as '5% DW'
               '5% ds' : '5% DW', # consider as '5% DW'
               '10%DW' : '10% DW',
               '20%DW' : '20% DW',
               '50%DW' : '50% DW',
               '10% D/W' : '10% DW',
               '5% D/S' : '5% DW', # consider as '5% DW'
               '5% D/W' : '5% DW',
               '50% D/W' : '50% DW',
               'olimel' : 'olimel 1000ml', #TODO : 확인 필요
               'olimel 1L' : 'olimel 1000ml',
               'olimiel 1000' : 'olimel 1000ml',
               'Omapeone Peri 1448ml inj' : 'Omapeone Peri 1448ml',
               'periolimel 1500ml' : 'Peri olimel 1500ml',
               'winuf peri\xa0 2020ml' : 'winuf peri  2020ml',
                'peri olimel 2020ml' : 'winuf peri  2020ml',
               'Proamin 10% 500ml' : np.nan,
               'proamin 10% 500ml' : np.nan,
               'PROAmin 10% 200ml' : np.nan,
               'TPN lipid' : np.nan,
               'TPN lipid 250ml' : np.nan,
               'SmofKabiven  CENTRAL 1477ml' : 'SmofKabiven CENTRAL 1477ml',
               'SMOFlipid inj 20%' : 'Smoflipid® 20%',
               'SMOFlipid 20% 500ml inj' : 'SMOFlipid 20% 500ml',
               '스모프카비벤 1206ml' : '스모프카비벤페리페랄주 1206ml',
        }
crf_fluid_df = crf_fluid_df.replace({hourly_fluid_name_col:crf_fluid_replace_dict})
crf_fluid_df = crf_fluid_df[crf_fluid_df[hourly_fluid_name_col].notna()]

# notice we don't care the volume
ens_replace_dict = {'그린비아 장솔루션' : '그린비아장솔루션',
                    '그린비아당뇨장솔루션' : '그린비아 DM',
                    '메디웰 1.5' : '메디웰1.5',
                    '메디웰당뇨' : '메디웰 DM',
                    '메디푸드 1.5' : '메디푸드1.5',
                    '메디푸드 DM' : '메디푸드 글루트롤',
                    '뉴케어KD' : '뉴케어 KD',
                    '뉴케어KD/ gastrostomy' : '뉴케어 KD',
                    '뉴케어KD+' : '뉴케어 KD+',
                    '뉴케어 KD 플러스' : '뉴케어 KD+',
                    'Harmonilan' : '하모닐란',
                    'Harmonilan 200mL bag' : '하모닐란',
                    'Harmonilan 500mL bag' : '하모닐란',
                    '하모닐란액(비브라운)' : '하모닐란',
                    'RTH 그린비아장솔루션' : 'RTH 그린비아장솔루션 500ml',
                    'RTH그린비아장솔루션 500ml' : 'RTH 그린비아장솔루션 500ml',
                    'RTH 뉴케어 DM' : 'RTH 뉴케어DM 400ml',
                    'RTH뉴케어DM 400ml' : 'RTH 뉴케어DM 400ml',
                    'RTH뉴케어화이바 400ml' : 'RTH 뉴케어화이바 400ml',
                    'RTH메디웰 400ml' : 'RTH 메디웰 400ml',
                    'RTH메디웰 500ml' : 'RTH 메디웰 500ml',
                    'RTH메디웰DM 500ml' : 'RTH 메디웰DM 500ml',
                    'RTH메디웰DM' : 'RTH 메디웰DM 500ml',
                    '메디푸드글루트롤 RTH' : 'RTH 메디푸드글루트롤 500ml',
                    '메디푸드 LD RTH' : 'RTH 메디푸드LD 400ml',
                    'RTH 그린비아당뇨솔루션' : '그린비아 DM',
                    'RTH뉴케어인텐시브TF' : 'RTH 인텐시브에프엘 500ml',
                    '노엔피오 2캔' : 'IGNORE',    # TODO: combine_finish
                    '뉴케어단백식' : 'IGNORE'     # TODO: combine_finish
                     }
crf_df[ens_name_cols] = crf_df[ens_name_cols].apply(lambda x: x.replace(ens_replace_dict))

# TPN df
tpn_replace_dict = {'SmofKabiven  CENTRAL 1477ml' : 'SmofKabiven CENTRAL 1477ml',
                    'Dextrose 5%' : '5% DW',
                    'Dextrose 10%' : '10% DW',
                    'Dextrose 20%' : '20% DW',
                    'Dextrose 50%' : '50% DW'
                     }

tpn_df = tpn_df.apply(lambda x: x.replace(tpn_replace_dict)) # name replacement
log.debug(tpn_df)

# BST df
bst_replace_dict = {'< 10' : '10',
                    '< 2' : '2',
                    '> 600' : '600',
                    '>600' : '600',
                    "'" : '0'  # temporary treatment. should be updated.
                   }
bst_df = bst_df.apply(lambda x: x.replace(bst_replace_dict))

# prerocess time columns
for col in time_cols:
  crf_df[col] = crf_df[col].replace('0', np.nan)
  crf_df[col] = pd.to_datetime(crf_df[col].astype('str'), format='mixed')
#crf_fluid_df[d0_time_col] = pd.to_datetime(crf_fluid_df[d0_time_col].astype('str'), format='mixed').dt.tz_convert('UTC').dt.tz_localize(None)
#crf_fluid_df[d0_time_col] = pd.to_datetime(crf_fluid_df[d0_time_col].astype('str'), format='mixed').dt.tz_convert('Asia/Seoul').dt.tz_localize(None)
crf_fluid_df[d0_time_col] = pd.to_datetime(crf_fluid_df[d0_time_col].astype('str'), format='mixed')
crf_fluid_df['fluid_date'] = pd.to_datetime(crf_fluid_df['fluid_date'].astype('str'), format='mixed')

#crf_insulin_df[d0_time_col] = pd.to_datetime(crf_insulin_df[d0_time_col].astype('str'), format='mixed').dt.tz_convert('UTC').dt.tz_localize(None)
#crf_insulin_df[d0_time_col] = pd.to_datetime(crf_insulin_df[d0_time_col].astype('str'), format='mixed').dt.tz_convert('Asia/Seoul').dt.tz_localize(None)
crf_insulin_df[d0_time_col] = pd.to_datetime(crf_insulin_df[d0_time_col].astype('str'), format='mixed')
crf_insulin_df['fluid_date'] = pd.to_datetime(crf_insulin_df['fluid_date'].astype('str'), format='mixed')

bst_df['value'] = bst_df['value'].astype('int')
bst_df['time'] = pd.to_datetime(bst_df['time'].astype('str'), format='mixed')
#bst_df = bst_df.astype({'time': 'datetime64[ns]', 'value': 'int'})

# examine D1_time
#crf_df.drop([13, 34, 41, 71, 90, 110, 136, 161, 253, 438], inplace=True)
crf_df.drop([566, 567], inplace=True) #SHAYHAN
diff = (crf_df[d1_time_col] - crf_df[d0_time_col]).dt.total_seconds() - 3600*24
wrong_s = diff.abs() != 0
if wrong_s.any() == True:
  log.error(print_for_log("d0 and d1 doesn't match", crf_df.loc[wrong_s, [d0_time_col, d1_time_col]]))

import numpy as np

def get_non_nan_unique_values(df):
  val_list = []
  for col in df.columns:
    uniques = df[col].dropna().unique().tolist()
    val_list.extend(uniques)
  return set(val_list)

def strip(df):
  for col in df.columns:
    crf_df[col] = str(crf_df[col]).strip()

def get_unlisted_items(df, s):
  return [ x for x in get_non_nan_unique_values(df) if x not in s.values ]



# examine TPN values
#tpn_df = tpn_df.sort_index().sort_index(axis=0)
#idx = pd.IndexSlice
#df = crf_df.loc[idx[slice(None)],idx[slice(None),['TPN 1', 'TPN 2', 'TPN 3'], ['type']]]
df = crf_df[tpn_name_cols]
log.info("### TPN Names")
log.info(print_for_log("CRF Values: " + str(sorted(get_non_nan_unique_values(df)))))
log.info(print_for_log("TPN items: " + str(sorted(tpn_df.index.values.tolist()))))
log.info(print_for_log("Not Found: " + str(sorted(get_unlisted_items(df, tpn_df.index)))))

df = crf_df[fluid_name_cols]
log.info(print_for_log("### Fluid Names"))
log.info(print_for_log("CRF Values: " + str(sorted(get_non_nan_unique_values(df)))))
log.info(print_for_log("TPN items: " + str(sorted(tpn_df.index))))
log.info(print_for_log("Not Found: " + str(sorted(get_unlisted_items(df, tpn_df.index)))))

df = crf_df[ens_name_cols]
log.info(print_for_log("### ENS (Enteral Nutrion Solution) Names"))
log.info(print_for_log("CRF Values: " + str(sorted(get_non_nan_unique_values(df)))))
log.info(print_for_log("ENS Items: " + str(sorted(ens_df.index))))
log.info(print_for_log("Not Found: " + str(sorted(get_unlisted_items(df, ens_df.index)))))

df = crf_df[amount_cols]
log.info(print_for_log("### amount columns"))
log.info(print_for_log("CRF Values: " + str(sorted(get_non_nan_unique_values(df)))))

df = crf_df[insulin_name_cols]
log.info(print_for_log("### insulin name columns"))
log.info(print_for_log("CRF Values: " + str(sorted(get_non_nan_unique_values(df)))))

df = crf_df[medication_name_cols]
log.info(print_for_log("### medication name columns"))
log.info(print_for_log("CRF Values: " + str(sorted(get_non_nan_unique_values(df)))))

df = crf_df[steroid_name_cols]
log.info(print_for_log("### steroid name columns"))
log.info(print_for_log("CRF Values: " + str(sorted(get_non_nan_unique_values(df)))))

df = crf_fluid_df[hourly_fluid_name_col].to_frame()
log.info(print_for_log("### Hourly fluid name column"))
log.error(print_for_log("Hourly Fluid Name Values: " + str(sorted(get_non_nan_unique_values(df)))))
log.error(print_for_log("Not Found: " + str(sorted(get_unlisted_items(df, tpn_df.index)))))

df = crf_insulin_df[hourly_insulin_name_col].to_frame()
log.info(print_for_log("### Hourly insulin name column"))
log.error(print_for_log("Hourly Insulin Name Values: " + str(sorted(get_non_nan_unique_values(df)))))
log.error(print_for_log("Not Found: " + str(sorted(get_unlisted_items(df, insulin_info_df.index)))))

# examin insulin amount
for col in insulin_amount_cols:
  df = crf_df.loc[crf_df[col]>=100, [ht_col,  pno_col, col]]
  if len(df) > 1:
    log.warning("strange insulin amount: " + col)
    log.warning(df)

# Record generation

# BST computations
def process_bst(crf_df, bst_df):
  b_df = bst_df.groupby([ht_col, pno_col]).apply(lambda x: dict(zip(x['time'],x['value'])))
  b_df = b_df.map(lambda x: pd.Series(x).sort_index())
  b_df.name = 'bst'
  c_df = crf_df.reset_index()
  c_df.index = pd.MultiIndex.from_frame(c_df[[ht_col, pno_col]], names=b_df.index.names)
  c_df = c_df.join(b_df, how='left', rsuffix='_r')
  crf_df['bst'] = c_df.set_index('index')['bst']
  if crf_df['bst'].isna().any() == True:
    log.error(f"patients without BSTs\n{crf_df[crf_df['bst'].isna()][[ht_col, pno_col, d0_time_col]]}")

SLOT_LEN = 3*24*60   # 3days * 24hr * 60min
DAY_LEN = 24*60      # 1day * 24hr * 60min
INS_SHORT_LEN = 4*60 # insulin short type: 4hr * 60min
INS_LONG_LEN = 24*60 # insulin long type: 24hr * 60min
INS_LONG_ONSET_LEN = 2*60 # insulin long type onset time: 2hr * 60min
STRD_ONSET_LEN = 60 # steroid onset time: 1hr * 60min
STRD_DECAY_CYCLES = 3 # consider 3 half-life cycles

from itertools import repeat

def get_slot_idx_with_d0(time_s, d0_time_s):
  # time_s: series of time whose index should be part of crf_df

  df = crf_df.loc[time_s.index]
  return ((time_s - (d0_time_s - datetime.timedelta(hours=24))).dt.total_seconds() / 60).astype(int)

def get_slot_idx(crf_df, time_s):
  # time_s: series of time whose index should be part of crf_df

  df = crf_df.loc[time_s.index]
  return ((time_s - (df[d0_time_col] - datetime.timedelta(hours=24))).dt.total_seconds() / 60).astype(int)

def decay_fn(initial_amt, half_life_period, time):
  return initial_amt * pow(0.5, time/half_life_period)

def get_affected_amount_with_decay(amt, period):
  # amt: initial amount
  # period: half_life_period (in hour)
  period = int(period)
  period *= 60 # change the unit to minute
  a = [0] * (period*STRD_DECAY_CYCLES+1) # consider 3 cycles of half-life
  a[0] = amt
  for i in range(1, period*3+1):
    a[i] = decay_fn(amt, period, i)
    a[i-1] -= a[i]
  return a[:-1]

def shift_and_sum_elementwise(a, n):
  a = a.to_list()
  total_sum = a
  if len(a) < n + 2:
    log.error(f"shift_and_sum_elementwise big shift {len(a)}, {n}")
  for i in range(1,n):
    total_sum[i] += total_sum[i-1]
  return pd.Series(total_sum)

def initialize_before_processing(crf_df):
  crf_df['calorie'] = pd.Series([pd.Series([0]*SLOT_LEN) for _ in crf_df.index], index=crf_df.index)
  crf_df['ens'] = pd.Series([pd.Series([0]*SLOT_LEN) for _ in crf_df.index], index=crf_df.index)
  crf_df['ens_distributed'] = pd.Series([pd.Series([0] * SLOT_LEN) for _ in crf_df.index], index=crf_df.index)
  crf_df['insulin'] = pd.Series([pd.Series([0]*SLOT_LEN) for _ in crf_df.index], index=crf_df.index)
  # crf_df['insulin_c'] = pd.Series([pd.Series([0] * SLOT_LEN) for _ in crf_df.index], index=crf_df.index)
  crf_df['insulin_h'] = pd.Series([pd.Series([0] * SLOT_LEN) for _ in crf_df.index], index=crf_df.index)
  crf_df['insulin_i'] = pd.Series([pd.Series([0] * SLOT_LEN) for _ in crf_df.index], index=crf_df.index)
  crf_df['steroid'] = pd.Series([pd.Series([0]*SLOT_LEN) for _ in crf_df.index], index=crf_df.index)
  crf_df['medication'] = pd.Series([pd.Series([0]*SLOT_LEN) for _ in crf_df.index], index=crf_df.index)
  crf_df['bst_sequence'] = pd.Series([pd.Series([0]*SLOT_LEN) for _ in crf_df.index], index=crf_df.index)
  crf_df['insulin_i_iv'] = pd.Series([pd.Series([0] * SLOT_LEN) for _ in crf_df.index], index=crf_df.index)

def process_hourly_fluid_row(row, h_start, h_end):
  row = row[1]
  calorie = []
  assert row[d0_time_col].hour != 24, f'Hour in D0 time should not be 24'

  for h in range(h_start, h_end):
    calorie.extend([row[hour_cols[h]]/60] * 60)
  return {ht_col: row[ht_col], pno_col: row[pno_col], d0_time_col: row[d0_time_col], 'calorie_fluid': np.array(calorie)}

def process_hourly_fluid(crf_df, crf_fluid_df):
  #breakpoint()
  crf_fluid_df = crf_fluid_df[crf_fluid_df[hourly_fluid_name_col].notna()]
  c_df = crf_fluid_df.join(tpn_df, on='fluid_name', how='inner')
  if len(c_df) != len(crf_fluid_df):
    raise SystemExit("fluid_name not in tpn table")
  c_df[hour_cols] = c_df[hour_cols].multiply(c_df['concentration'], axis=0)

  c_df = c_df.groupby([ht_col, pno_col, d0_time_col, 'fluid_date'])[hour_cols].sum().reset_index()
  df = c_df.join(crf_df.set_index([ht_col, pno_col, d0_time_col]), on = [ht_col, pno_col, d0_time_col], how='inner')
  if len(df) != len(c_df):
    missing = list(set(c_df.index) - set(df.index))
    log.error(f"cannot find corresponding crf record {c_df.loc[missing]}")
    c_df = c_df.loc[df.index]
  assert ((c_df[d0_time_col].dt.date - datetime.timedelta(days=1)) <= c_df['fluid_date']).all() and \
    ((c_df[d0_time_col].dt.date + datetime.timedelta(days=1)) >= c_df['fluid_date']).all(), \
    f"fluid_date wrong!!!"

  df = c_df[c_df[d0_time_col].dt.date - datetime.timedelta(days=1) == c_df['fluid_date']]
  df = pd.DataFrame(list(map(process_hourly_fluid_row, df.iterrows(), df[d0_time_col].dt.hour, repeat(24))))
  calorie_df = crf_df.join(df.set_index([ht_col, pno_col, d0_time_col]), on=[ht_col, pno_col, d0_time_col], how='inner')
  temp_s = pd.Series(calorie_df.apply(
      lambda x: list(pd.concat([x['calorie'][:len(x['calorie_fluid'])] + x['calorie_fluid'], x['calorie'][len(x['calorie_fluid']):]])),
      axis=1), index=calorie_df.index)
  crf_df.loc[calorie_df.index, ['calorie']] = temp_s.map(pd.Series)

  df = c_df[c_df[d0_time_col].dt.date == c_df['fluid_date']]
  df = pd.DataFrame(list(map(process_hourly_fluid_row, df.iterrows(), repeat(0), repeat(24))))
  calorie_df = crf_df.join(df.set_index([ht_col, pno_col, d0_time_col]), on=[ht_col, pno_col, d0_time_col], how='inner')
  temp_s = pd.Series(calorie_df.apply(
      lambda x: list(pd.concat([x['calorie'][:DAY_LEN - x[d0_time_col].hour*60], x['calorie'][DAY_LEN - x[d0_time_col].hour*60:DAY_LEN*2 - x[d0_time_col].hour*60] + x['calorie_fluid'], x['calorie'][DAY_LEN*2 - x[d0_time_col].hour*60:]])),
      axis=1), index=calorie_df.index)
  crf_df.loc[calorie_df.index, ['calorie']] = temp_s.map(pd.Series)

  df = c_df[c_df[d0_time_col].dt.date + datetime.timedelta(days=1) == c_df['fluid_date']]
  df = pd.DataFrame(list(map(process_hourly_fluid_row, df.iterrows(), repeat(0), df[d0_time_col].dt.hour)))
  calorie_df = crf_df.join(df.set_index([ht_col, pno_col, d0_time_col]), on=[ht_col, pno_col, d0_time_col], how='inner')
  temp_s = pd.Series(calorie_df.apply(
      lambda x: list(pd.concat([x['calorie'][:DAY_LEN*2 - len(x['calorie_fluid'])], x['calorie'][DAY_LEN*2 - len(x['calorie_fluid']):DAY_LEN*2] + x['calorie_fluid'], x['calorie'][DAY_LEN*2:]])),
      axis=1), index=calorie_df.index)
  crf_df.loc[calorie_df.index, ['calorie']] = temp_s.map(pd.Series)

def process_hourly_insulin_hour(df, h):

  start_idx_s = get_slot_idx(df, df['fluid_date'] + datetime.timedelta(hours=h))
  df = df[(start_idx_s >= 0) & (start_idx_s < DAY_LEN*2)]
  start_idx_s = start_idx_s.loc[df.index]
  finish_idx_s = start_idx_s + 60 # 1 HR = 60 min.
  duration_short_ratio_s =df['d_type_short']
  amount_s = df[hour_cols[h]] / 60 # divide by 60 min
  # amount_s = df[hour_cols[h]]  # divide by 60 min
  INS_SHORT_INTAKE = [i for i in range(1, 60)] + [60] * (INS_SHORT_LEN - 60) + [i for i in range(60, 0, -1)]
  INS_LONG_INTAKE = [i for i in range(1, 60)] + [60] * (INS_LONG_LEN - INS_LONG_ONSET_LEN - 60) + [i for i in range(60, 0, -1)]

  insulin_l = list(map(lambda idx, r, amt:
                       pd.Series([0] * idx + [(amt * r / INS_SHORT_LEN) * i for i in INS_SHORT_INTAKE] + [0] * (SLOT_LEN - (idx + len(INS_SHORT_INTAKE))))[:SLOT_LEN] +
                       pd.Series([0] * (idx + INS_LONG_ONSET_LEN) + [(amt * r / INS_LONG_LEN) * i for i in INS_LONG_INTAKE] + [0] * (SLOT_LEN - (idx + len(INS_LONG_INTAKE))))[:SLOT_LEN],
                       start_idx_s, duration_short_ratio_s, amount_s))


  # insulin_l = list(map(lambda idx, r, amt:
  #                 pd.Series([0] * idx + [amt*r/INS_SHORT_LEN] * INS_SHORT_LEN + [0] * (SLOT_LEN-(idx+INS_SHORT_LEN)))[:SLOT_LEN] +
  #                 pd.Series([0] * (idx+INS_LONG_ONSET_LEN) + [amt*(1-r)/INS_LONG_LEN] * (INS_LONG_LEN - INS_LONG_ONSET_LEN) + [0] * (SLOT_LEN-(idx+INS_LONG_LEN)))[:SLOT_LEN],
  #                 start_idx_s, duration_short_ratio_s, amount_s))
  # df['h_insulin'] = pd.Series(list(map(shift_and_sum_elementwise,insulin_l, finish_idx_s-start_idx_s+1)), index=df.index)

  df['h_insulin'] = insulin_l

  df2 = df.groupby([ht_col, pno_col, d0_time_col])['h_insulin'].sum()
  df3 = df2.to_frame().join(crf_df.reset_index().set_index([ht_col, pno_col, d0_time_col]), how='inner')
  df4 = df3.set_index('index')
  crf_df.loc[df4.index,'insulin'] = crf_df.loc[df4.index,'insulin'] + df4['h_insulin']
  crf_df.loc[df4.index, 'insulin_h'] = crf_df.loc[df4.index, 'insulin_h'] + df4['h_insulin']

def process_hourly_insulin(crf_df, crf_insulin_df):
  crf_insulin_df = crf_insulin_df[crf_insulin_df[hourly_insulin_name_col].notna()]
  i_df = crf_insulin_df.join(insulin_info_df, on=hourly_insulin_name_col, how='inner')
  if len(i_df) != len(crf_insulin_df):
    raise SystemExit("insulin_name not in insulin info table")

  for h in range(24):
    process_hourly_insulin_hour(i_df, h)


# def process_calorie_for_before_feeding(crf_df):
  # #included_last_range_ratio = 6 / 24.0 # Consider only last 6 hours before feedings
  # df = pd.DataFrame(list(map(process_hourly_BF_fluid, crf_fluid_df[crf_fluid_df['point']=='BF'].iterrows())))
  # df = df.groupby([ht_col, pno_col, d0_time_col]).sum().reset_index().set_index([ht_col, pno_col, d0_time_col])
  # c_df = crf_df.reset_index().set_index([ht_col, pno_col, d0_time_col])
  # calorie_df = c_df.join(df, how='inner').set_index('index')
  # crf_df.loc[calorie_df.index, ['calorie']] = calorie_df.apply(
  #     lambda x: pd.concat([pd.Series(x['calorie'][:len(x['calorie_fluid'])] + x['calorie_fluid']), pd.Series(x['calorie'][len(x['calorie_fluid']):])]),
  #     axis=1)

  # df = pd.DataFrame(list(map(process_hourly_D0_fluid_for_before_feeding, crf_fluid_df[crf_fluid_df['point']=='D0'].iterrows())))
  # df = df.groupby([ht_col, pno_col, d0_time_col]).sum().reset_index().set_index([ht_col, pno_col, d0_time_col])
  # c_df = crf_df.reset_index().set_index([ht_col, pno_col, d0_time_col])
  # calorie_df = c_df.join(df, how='inner').set_index('index')
  # crf_df.loc[calorie_df.index, ['calorie']] = calorie_df.apply(
  #     lambda x: pd.concat([pd.Series(x['calorie'][:DAY_LEN - len(x['calorie_fluid'])]), pd.Series(x['calorie'][DAY_LEN - len(x['calorie_fluid']):DAY_LEN] + x['calorie_fluid']), pd.Series(x['calorie'][DAY_LEN:])]),
  #     axis=1)

  # # process TPN or fluid
  # for col in [x for x in crf_df.columns if 'BF_TPN_name' in x or 'BF_fluid_name' in x]:
  #   if crf_df[col].isna().all() == True:
  #     continue
  #   df = crf_df[crf_df[col].notna()].join(tpn_df, on=col)

  #   ignore_indexes = crf_df[crf_df[col] == 'IGNORE'].index
  #   df.loc[ignore_indexes,col] = np.nan
  #   df.loc[ignore_indexes,col.replace('name','amount')] = np.nan

  #   #assert
  #   if not df[col].isna().equals(df[col.replace('name','amount')].isna()):
  #     log.error(f"name and amount inconsistent:\n{df.loc[~pd.Series.eq(df[col].isna(), df[col.replace('name','amount')].isna()), [col, col.replace('name','amount')]]}")
  #     log.error(ignore_indexes)
  #   #assert
  #   if not df[col].isna().equals(df['concentration'].isna()):
  #     log.error(f"name and concentration inconsistent:\n{df.loc[~pd.Series.eq(df[col].isna(), df['concentration'].isna()), col]} {df[col].where(df[col] == 'IGNORE', np.nan).isna()}")
  #   calorie_s = pd.Series(map(lambda amt: pd.Series([amt/DAY_LEN] * DAY_LEN + [0]*(SLOT_LEN-DAY_LEN)),
  #                                                     df[col.replace('name','amount')].fillna(0)*df['concentration'].fillna(0)), index=df.index)
  #   crf_df.loc[df.index,'calorie'] = crf_df.loc[df.index,'calorie'] + calorie_s
  #   #display(result_df.loc[91]) # patient DUMC 10618267]

def process_calorie_for_feedings(crf_df):
  # process ENS
  for col in [x for x in crf_df.columns if 'feeding_name' in x]:
    df = crf_df[crf_df[col].notna()].join(ens_df, on=col)

    if df[col.replace('name','time')].notna().all() != True:
      log.error(f"feeding time is missing:\n{df.loc[df[col.replace('name','time')].isna(),[ht_col, pno_col, col]]}")
      df = df[df[col.replace('name','time')].notna()]
    # Some BSTs are checked at D0 time, so for the safety, we add the calorie for the ENS to the next slot
    idx_s = get_slot_idx(df, df[col.replace('name','time')]) + 1

    #print(df.index.is_unique)
    #display(df.loc[df.index.duplicated(), :])
    assert df[col].isna().equals(df[col.replace('name','amount')].isna()), f"name and amount inconsistent: {col}"
    duration_ens = 30 # 30 min
    ENS_INTAKE = [1]*duration_ens + [2]*duration_ens + [3]*duration_ens*2 + [2]*duration_ens + [1]*duration_ens
    weight_ens = sum(ENS_INTAKE)
    ens_cal_s = pd.Series(map(lambda idx, amt: pd.Series([0]*idx + [(amt/weight_ens)*i for i in ENS_INTAKE] + [0]*(SLOT_LEN-(idx+ len(ENS_INTAKE) +1))),
                                                      idx_s, df[col.replace('name','amount')].fillna(0)*df['concentration'].fillna(0)), index=df.index)
    # ens_cal_s = pd.Series(map(lambda idx, amt: pd.Series([0] * idx + [amt] + [0] * (SLOT_LEN - (idx + 1))),
    #                           idx_s, df[col.replace('name', 'amount')].fillna(0) * df['concentration'].fillna(0)),
    #                       index=df.index)
    assert ens_cal_s.isna().any() == False, \
      f"NaN calorie: {crf_df.loc[~pd.Series.eq(df[col].isna(), df['concentration'].isna()), col]}"
    crf_df.loc[df.index, 'calorie'] = crf_df.loc[df.index,'calorie'] + ens_cal_s
    crf_df.loc[df.index, 'ens_distributed'] = crf_df.loc[df.index, 'ens_distributed'] + ens_cal_s

    ens_cal_s = pd.Series(map(lambda idx, amt: pd.Series([0] * idx + [amt] + [0] * (SLOT_LEN - (idx + 1))), idx_s, df[col.replace('name', 'amount')].fillna(0) * df['concentration'].fillna(0)), index=df.index)
    assert ens_cal_s.isna().any() == False, \
        f"NaN calorie: {crf_df.loc[~pd.Series.eq(df[col].isna(), df['concentration'].isna()), col]}"
    crf_df.loc[df.index, 'ens'] = crf_df.loc[df.index, 'ens'] + ens_cal_s


def process_i_insulin(crf_df, col):
  df = crf_df[crf_df[col].notna()]
  duration_short_ratio_s = df.join(insulin_info_df, on=col)['d_type_short']
  idx_s = get_slot_idx(df, df[col.replace('name','time')])
  amount_s = df[col.replace('name','amount')]
  insulin_s = pd.Series(map(lambda idx, r, amt:
                  pd.Series([0] * idx + [amt*r/INS_SHORT_LEN] * INS_SHORT_LEN + [0] * (SLOT_LEN-(idx+INS_SHORT_LEN)))[:SLOT_LEN] +
                  pd.Series([0] * (idx+INS_LONG_ONSET_LEN) + [amt*(1-r)/INS_LONG_LEN] * (INS_LONG_LEN - INS_LONG_ONSET_LEN) + [0] * (SLOT_LEN-(idx+INS_LONG_LEN)))[:SLOT_LEN],
                  idx_s, duration_short_ratio_s, amount_s), index=df.index)

  if 300 in df.index:
    print(df.loc[300,[ht_col, pno_col]], df.loc[300, col], duration_short_ratio_s.loc[300], idx_s.loc[300], amount_s.loc[300], insulin_s.loc[300])
  for i in range(len(insulin_s)):
    assert len(insulin_s.iloc[i]) == SLOT_LEN, f"SLOT_LEN too big"
  crf_df.loc[df.index,'insulin'] = crf_df.loc[df.index,'insulin'] + insulin_s
  crf_df.loc[df.index, 'insulin_i'] = crf_df.loc[df.index, 'insulin_i'] + insulin_s

  # Update 'insulin_i_iv' only for IV insulin rows
  route_name = col.replace('name', 'route')
  df_iv = df[(df[route_name] == 'IV') | (df[route_name] == 'iv')]
  if not df_iv.empty:
      crf_df.loc[df_iv.index, 'insulin_i_iv'] = crf_df.loc[df_iv.index, 'insulin_i_iv'] + insulin_s.loc[df_iv.index]

def process_c_insulin(crf_df, col):
  df=crf_df[crf_df[col].notna()]
  if len(df[df[col.replace('name','start')] >= df[col.replace('name','finish')]]) != 0:
    log.error(f"{col} start time is equal or greater than finish\n{df.loc[df[col.replace('name','start')] > df[col.replace('name','finish')], [ht_col, pno_col, d0_time_col]]}")
    df = df[df[col.replace('name','start')] < df[col.replace('name','finish')]]

  duration_short_ratio_s = df.join(insulin_info_df, on=col)['d_type_short']
  start_idx_s = get_slot_idx(df, df[col.replace('name','start')])
  finish_idx_s = get_slot_idx(df, df[col.replace('name','finish')] - datetime.timedelta(seconds=10))
  finish_idx_s[start_idx_s > finish_idx_s] = start_idx_s.loc[start_idx_s > finish_idx_s]
  amount_s = df[col.replace('name','amount')] / (finish_idx_s - start_idx_s + 1)

  # handle the cases where start time is less than (D0 - 1) time
  loc_s = df[col.replace('name','start')] < (df[d0_time_col] - datetime.timedelta(hours=24))
  if len(loc_s[loc_s]) != 0:
    log.warning(f"c_insulin start before D - 1 time:\n{df.loc[loc_s,[ht_col,pno_col,d0_time_col,col.replace('name','start'),col.replace('name','finish')]]}")
    new_start_idx_s = pd.Series(0, index=loc_s[loc_s].index)
    #amount_s.loc[loc_s] = amount_s.loc[loc_s] * (finish_idx_s - new_start_idx_s.loc[loc_s])/(finish_idx_s.loc[loc_s] - start_idx_s.loc[loc_s])
    start_idx_s.loc[loc_s] = new_start_idx_s
  # handle the cases where finish time is greater than D1 time
  loc_s = df[col.replace('name','finish')] > df[d1_time_col]
  if len(loc_s[loc_s]) != 0:
    log.warning(f"c_insulin finish after D1 time:\n{df.loc[loc_s,[ht_col,pno_col,d0_time_col,col.replace('name','start'),col.replace('name','finish')]]}")
    new_finish_idx_s = get_slot_idx(df, df.loc[loc_s,d1_time_col] - datetime.timedelta(seconds=10))
    #amount_s.loc[loc_s] = amount_s.loc[loc_s] * (new_finish_idx_s - start_idx_s.loc[loc_s])/(finish_idx_s.loc[loc_s] - start_idx_s.loc[loc_s])
    finish_idx_s.loc[loc_s] = new_finish_idx_s

  insulin_l = list(map(lambda idx, r, amt:
                  pd.Series([0] * idx + [amt*r/INS_SHORT_LEN] * INS_SHORT_LEN + [0] * (SLOT_LEN-(idx+INS_SHORT_LEN)))[:SLOT_LEN] +
                  pd.Series([0] * (idx+INS_LONG_ONSET_LEN) + [amt*(1-r)/INS_LONG_LEN] * (INS_LONG_LEN - INS_LONG_ONSET_LEN) + [0] * (SLOT_LEN-(idx+INS_LONG_LEN)))[:SLOT_LEN],
                  start_idx_s, duration_short_ratio_s, amount_s))
  insulin_s = pd.Series(list(map(shift_and_sum_elementwise,insulin_l, finish_idx_s-start_idx_s+1)), index=df.index)
  # if 300 in df.index:
  #   print(df.loc[300,[ht_col, pno_col]], df.loc[300, col], duration_short_ratio_s.loc[300], idx_s.loc[300], amount_s.loc[300], insulin_s.loc[300])
  for i in range(len(insulin_s)):
    assert len(insulin_s.iloc[i]) == SLOT_LEN, f"SLOT_LEN too big"
  crf_df.loc[df.index,'insulin'] = crf_df.loc[df.index,'insulin'] + insulin_s
  crf_df.loc[df.index, 'insulin_c'] = crf_df.loc[df.index, 'insulin_c'] + insulin_s

def process_i_steroid(crf_df, col):
  df=crf_df[crf_df[col].notna()]
  period_s = df.join(steroid_info_df, on=col)['d_min'].astype(int)
  idx_s = get_slot_idx(df, df[col.replace('name','time')])
  amount_s = df[col.replace('name','dose')]
  steroid_s = pd.Series(map(lambda idx, p, amt:
                  pd.Series(([0] * (idx+STRD_ONSET_LEN) + get_affected_amount_with_decay(amt, p) + [0] * (SLOT_LEN-(idx+STRD_ONSET_LEN+STRD_DECAY_CYCLES*p)))[:SLOT_LEN]),
                  idx_s, period_s, amount_s), index=df.index)
  for i in range(len(steroid_s)):
    assert len(steroid_s.iloc[i]) == SLOT_LEN, f"SLOT_LEN too big"
  crf_df.loc[df.index,'steroid'] = crf_df.loc[df.index,'steroid'] + steroid_s

def process_c_steroid(crf_df, col):
  df=crf_df[crf_df[col].notna()]

  if len(df[df[col.replace('name','start')] >= df[col.replace('name','finish')]]) != 0:
    log.error(f"{col} start time is equal or greater than finish\n{df.loc[df[col.replace('name','start')] > df[col.replace('name','finish')], [ht_col, pno_col, d0_time_col]]}")
    df = df[df[col.replace('name','start')] < df[col.replace('name','finish')]]

  period_s = df.join(steroid_info_df, on=col)['d_min'].astype(int)
  start_idx_s = get_slot_idx(df, df[col.replace('name','start')])
  finish_idx_s = get_slot_idx(df, df[col.replace('name','finish')] - datetime.timedelta(seconds=10))
  amount_s = df[col.replace('name','dose')] / (finish_idx_s - start_idx_s + 1)

  # handle the cases where start time is less than (D0 - 1) time
  loc_s = df[col.replace('name','start')] < (df[d0_time_col] - datetime.timedelta(hours=24))
  if len(loc_s[loc_s]) != 0:
    log.warning(f"c_steroid start before D - 1 time:\n{df.loc[loc_s,[ht_col,pno_col,d0_time_col,col.replace('name','start'),col.replace('name','finish')]]}")
    new_start_idx_s = pd.Series(0, index=loc_s[loc_s].index)
    #amount_s.loc[loc_s] = amount_s.loc[loc_s] * (finish_idx_s - new_start_idx_s.loc[loc_s])/(finish_idx_s.loc[loc_s] - start_idx_s.loc[loc_s])
    start_idx_s.loc[loc_s] = new_start_idx_s
  # handle the cases where finish time is greater than D1 time
  loc_s = df[col.replace('name','finish')] > df[d1_time_col]
  if len(loc_s[loc_s]) != 0:
    log.warning(f"c_steroid finish after D1 time:\n{df.loc[loc_s,[ht_col,pno_col,d0_time_col,col.replace('name','start'),col.replace('name','finish')]]}")
    new_finish_idx_s = get_slot_idx(df, df.loc[loc_s,d1_time_col] - datetime.timedelta(seconds=10))
    #amount_s.loc[loc_s] = amount_s.loc[loc_s] * (new_finish_idx_s - start_idx_s.loc[loc_s])/(finish_idx_s.loc[loc_s] - start_idx_s.loc[loc_s])
    finish_idx_s.loc[loc_s] = new_finish_idx_s

  steroid_l = list(map(lambda idx, p, amt:
                  pd.Series(([0] * (idx+STRD_ONSET_LEN) + get_affected_amount_with_decay(amt, p) + [0] * (SLOT_LEN-(idx+STRD_ONSET_LEN+STRD_DECAY_CYCLES*p)))[:SLOT_LEN]),
                  start_idx_s, period_s, amount_s))
  steroid_s =pd.Series(list(map(shift_and_sum_elementwise, steroid_l, finish_idx_s-start_idx_s+1)), index=df.index)
  for i in range(len(steroid_s)):
    assert len(steroid_s.iloc[i]) == SLOT_LEN, f"SLOT_LEN too big"
  crf_df.loc[df.index,'steroid'] = crf_df.loc[df.index,'steroid'] + steroid_s

def process_medication(crf_df, col):
  df=crf_df[crf_df[col].notna()]
  idx_s = get_slot_idx(df, df[col.replace('name','time')])
  amount_s = df[col.replace('name','amount')]
  medication_s = pd.Series(map(lambda idx, amt:
                  pd.Series([0] * idx + [amt] + [0] * (SLOT_LEN-(idx+1))),
                  idx_s, amount_s), index=df.index)
  crf_df.loc[df.index,'medication'] = crf_df.loc[df.index,'medication'] + medication_s

def generate_bst_sequence(crf_df):
    bst_sequences = []

    for ind in crf_df.index:
        result = pd.Series([0] * SLOT_LEN)
        bsts = crf_df.loc[ind, 'bst']
        d0_time = crf_df.loc[ind, d0_time_col]
        for time, value in bsts.items():
            idx = int(
                (time - (d0_time - datetime.timedelta(hours=24) - datetime.timedelta(seconds=1))).total_seconds() / 60)
            # Ensure the index is within the bounds of SLOT_LEN
            if 0 <= idx < SLOT_LEN:
                result[idx] = value
        bst_sequences.append(result)

    # Assign the list of results to the DataFrame column
    crf_df['bst_sequence'] = bst_sequences

def interpolate_zeros(values):
    values = np.array(values, dtype=float)  # Convert to float to handle NaN
    original_values = values.copy()  # Copy of original values

    # Replace zeros with NaN
    values[values == 0] = np.nan

    # Perform interpolation
    interpolated_values = pd.Series(values).interpolate(method='linear', limit_direction='both')

    # Retain the original non-zero values
    for i, value in enumerate(original_values):
        if value != 0:
            interpolated_values[i] = value

    return interpolated_values.to_list()

initialize_before_processing(crf_df)
process_hourly_fluid(crf_df, crf_fluid_df)
process_hourly_insulin(crf_df, crf_insulin_df)
#process_calorie_for_before_feeding(crf_df)
process_calorie_for_feedings(crf_df)

for col in insulin_name_cols:
  if 'name_i_' in col:
    process_i_insulin(crf_df, col)
  else:
    #process_c_insulin(crf_df, col)
    pass

for col in steroid_name_cols:
  if 'name_i_' in col:
    process_i_steroid(crf_df, col)
  else:
    process_c_steroid(crf_df, col)

for col in medication_name_cols:
  process_medication(crf_df, col)

process_bst(crf_df, bst_df)

generate_bst_sequence(crf_df)

# # Apply the interpolation function to each row in the 'values' column
# crf_df['bst_sequence'] = crf_df['bst_sequence'].apply(interpolate_zeros)

crf_df['bst_sequence_inter'] = crf_df['bst_sequence'].apply(interpolate_zeros)

# Normalize input feature size
input_columns = ['calorie', 'insulin', 'steroid', 'medication']
for ind in crf_df.index:
  for col in input_columns:
    if len(crf_df[col][ind]) > SLOT_LEN:
      crf_df[col][ind] = crf_df[col][ind][:SLOT_LEN]

crf_df.reset_index(drop=True, inplace=True)
crf_df.to_pickle(os.path.join(folder_path, 'crf_df.pkl'))
# crf_df = pd.read_pickle(os.path.join(folder_path, 'crf_df.pkl'))
